Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned

class RandomizedSet {
public:
    /** Initialize your data structure here. */
    set<int> st;
    RandomizedSet() {
            
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        bool isInserted=st.insert(val).second;
       
        return isInserted;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        bool isPresent=st.find(val)!=st.end();
        if(isPresent)
        {
           
            st.erase(val);
        }
        return isPresent;
        
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int setSize=st.size();
        auto itr=st.begin();
        int randInt=rand()%setSize;
        advance(itr,randInt);
        return *itr;
        
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
